<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>Comment</key>
	<string>Copyright 2021 Palantir Technologies, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.</string>
	<key>Description</key>
	<string>Downloads the latest version of log4j-sniffer from the vendor, then creates an installer package.</string>
	<key>Identifier</key>
	<string>com.github.palantir.pkg.log4j-sniffer</string>
	<key>Input</key>
	<dict>
		<key>BUNDLE_ID</key>
		<string>com.github.palantir.log4j-sniffer</string>
	</dict>
	<key>MinimumVersion</key>
	<string>0.5.0</string>
	<key>ParentRecipe</key>
	<string>com.github.palantir.download.log4j-sniffer</string>
	<key>Process</key>
	<array>
		<dict>
			<key>Arguments</key>
			<dict>
				<key>pkgdirs</key>
				<dict>
					<key>private</key>
					<string>0775</string>
					<key>private/tmp</key>
					<string>0775</string>
					<key>private/tmp/log4j-sniffer</key>
					<string>0775</string>
					<key>private/tmp/log4j-sniffer/Scripts</key>
					<string>0775</string>
				</dict>
				<key>pkgroot</key>
				<string>%RECIPE_CACHE_DIR%/pkgroot</string>
			</dict>
			<key>Processor</key>
			<string>PkgRootCreator</string>
		</dict>
		<dict>
			<key>Arguments</key>
			<dict>
				<key>destination_path</key>
				<string>%pkgroot%/private/tmp/log4j-sniffer/</string>
				<key>source_path</key>
				<string>%RECIPE_CACHE_DIR%/downloads/%NAME%-%PLATFORM_ARCH%-%version%.dmg</string>
			</dict>
			<key>Processor</key>
			<string>Copier</string>
		</dict>
		<dict>
			<key>Arguments</key>
			<dict>
				<key>file_content</key>
				<string>#!/bin/sh

/bin/rm -rfv "${3}/private/tmp/log4j-sniffer" "${3}/usr/local/bin/log4j-sniffer"

exit 0</string>
				<key>file_mode</key>
				<string>0755</string>
				<key>file_path</key>
				<string>%pkgroot%/private/tmp/log4j-sniffer/Scripts/preinstall</string>
			</dict>
			<key>Processor</key>
			<string>FileCreator</string>
		</dict>
		<dict>
			<key>Arguments</key>
			<dict>
				<key>file_content</key>
				<string>#!/bin/sh

workingDir="${3}/private/tmp/log4j-sniffer"
binaryPath="${3}/usr/local/bin/log4j-sniffer"
dmgPath="$(/usr/bin/find "${workingDir}" -name "log4j-sniffer-*.dmg")"

# Verify an installer disk image is present in working directory.
if [ -z "$dmgPath" ]; then
  echo "❌ ERROR: Disk image not found at ${workingDir}, unable to proceed."
  exit 1
else
  echo "Verified disk image is present at ${dmgPath}. Attempting to mount disk image..."
fi

# Mount disk image.
dmgName=$(/usr/bin/basename "$dmgPath" | /usr/bin/awk -F.dmg '{print $1}')
mountPoint="${3}/Volumes/${dmgName}"
/usr/bin/hdiutil attach "$dmgPath" -mountpoint "$mountPoint" -nobrowse

# Search for binary in mounted disk image, or exit if disk image did not mount successfully.
if [ -d "$mountPoint" ]; then
  echo "Mounted disk image at ${mountPoint}. Looking for installer packages..."
  binaryDmgPath=$(/usr/bin/find "$mountPoint" -name "log4j-sniffer")
  if [ -z "$binaryDmgPath" ]; then
	echo "❌ ERROR: Binary not found in mounted disk image, unable to proceed."
	exit 1
  else
	echo "Verified binary is present at ${binaryDmgPath}. Proceeding with installation..."
  fi
else
  echo "❌ ERROR: No mounted disk image found at ${mountPoint}, unable to proceed."
  exit 1
fi

# Install binary to /usr/local/bin.
/bin/cp "$binaryDmgPath" "${3}/usr/local/bin/"
echo "Installed $(/usr/bin/arch) build of log4j-sniffer to /usr/local/bin."
/usr/bin/xattr -d com.apple.quarantine "$binaryPath"
echo "Removed quarantine attributes from ${binaryPath}."

# Unmount disk image.
/usr/bin/hdiutil detach "$(/usr/sbin/diskutil info "$mountPoint" | /usr/bin/awk '/Device Identifier/ {print $NF}')"

exit 0</string>
				<key>file_mode</key>
				<string>0755</string>
				<key>file_path</key>
				<string>%pkgroot%/private/tmp/log4j-sniffer/Scripts/postinstall</string>
			</dict>
			<key>Processor</key>
			<string>FileCreator</string>
		</dict>
		<dict>
			<key>Arguments</key>
			<dict>
				<key>pkg_request</key>
				<dict>
					<key>id</key>
					<string>%BUNDLE_ID%</string>
					<key>options</key>
					<string>purge_ds_store</string>
					<key>pkgname</key>
					<string>%NAME%-%PLATFORM_ARCH%-%version%</string>
					<key>scripts</key>
					<string>%pkgroot%/private/tmp/log4j-sniffer/Scripts</string>
					<key>version</key>
					<string>%version%</string>
				</dict>
			</dict>
			<key>Processor</key>
			<string>PkgCreator</string>
		</dict>
		<dict>
			<key>Arguments</key>
			<dict>
				<key>path_list</key>
				<array>
					<string>%pkgroot%</string>
				</array>
			</dict>
			<key>Processor</key>
			<string>PathDeleter</string>
		</dict>
	</array>
</dict>
</plist>
